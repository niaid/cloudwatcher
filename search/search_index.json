{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"cloudwatcher cloudwatcher is a tool for monitoring AWS CloudWatch metrics and logs in EC2 instances. It can be used both as a command line tool and as a Python library. Quick start Here are the steps to use cloudwatcher as a command line tool: Install cloudwatcher with pip Configure target EC2 instance Run cloudwatcher","title":"cloudwatcher"},{"location":"#cloudwatcher","text":"cloudwatcher is a tool for monitoring AWS CloudWatch metrics and logs in EC2 instances. It can be used both as a command line tool and as a Python library.","title":"cloudwatcher"},{"location":"#quick-start","text":"Here are the steps to use cloudwatcher as a command line tool: Install cloudwatcher with pip Configure target EC2 instance Run cloudwatcher","title":"Quick start"},{"location":"API_documentation/","text":"document.addEventListener('DOMContentLoaded', (event) => { document.querySelectorAll('h3 code').forEach((block) => { hljs.highlightBlock(block); }); }); h3 .content { padding-left: 22px; text-indent: -15px; } h3 .hljs .content { padding-left: 20px; margin-left: 0px; text-indent: -15px; martin-bottom: 0px; } h4 .content, table .content, p .content, li .content { margin-left: 30px; } h4 .content { font-style: italic; font-size: 1em; margin-bottom: 0px; } Package cloudwatcher Documentation Class CloudWatcher A base class for CloudWatch managers def __init__ ( self , service_name : str , aws_region_name : Union [ str , NoneType ] = None , aws_access_key_id : Union [ str , NoneType ] = None , aws_secret_access_key : Union [ str , NoneType ] = None , aws_session_token : Union [ str , NoneType ] = None ) -> None Initialize CloudWatcher Parameters: service_name ( str ): The name of the service region_name ( str ): The name of the region. Defaults to 'us-east-1' aws_access_key_id ( Optional[str] ): The AWS access key ID aws_secret_access_key ( Optional[str] ): The AWS secret access key aws_session_token ( Optional[str] ): The AWS session token Class MetricWatcher A class for AWS CloudWatch metric retrieval and parsing def __init__ ( self , namespace : str , ec2_instance_id : str , metric_name : str , metric_id : str , metric_unit : str , aws_access_key_id : Union [ str , NoneType ] = None , aws_secret_access_key : Union [ str , NoneType ] = None , aws_session_token : Union [ str , NoneType ] = None , aws_region_name : Union [ str , NoneType ] = None ) -> None Initialize MetricWatcher Parameters: namespace ( str ): The namespace of the metric region_name ( Optional[str] ): The name of the region. Defaults to 'us-east-1' start_token ( Optional[str] ): The start token to use for the query def get_ec2_uptime ( self , days : int , hours : int , minutes : int ) -> int Get the runtime of an EC2 instance Parameters: logger ( logging.logger ): logger to use. Any object that has 'info', 'warning' and 'error' methods days ( int ): how many days to subtract from the current date to determine the metric collection start time hours ( int ): how many hours to subtract from the current time to determine the metric collection start time minute ( int ): how many minutes to subtract from the current time to determine the metric collection start time namespace ( str ): namespace of the metric, e.g. 'NepheleNamespace' ec2_resource ( boto3.resource ): boto3 resource object to use, optional def is_ec2_running ( self ) -> bool Check if EC2 instance is running Returns: bool : True if instance is running, False otherwise def log_metric ( self , response : Union [ Dict , NoneType ] = None ) Query and log the metric data Parameters: kwargs (``): keyword arguments to pass to the handler response ( dict ): response retrieved with query_ec2_metrics .A query is performed if not provided. def log_response ( self , response : Union [ Dict , NoneType ] = None ) Query and log the response Parameters: response ( dict ): response retrieved with query_ec2_metrics .A query is performed if not provided. def query_ec2_metrics ( self , days : int , hours : int , minutes : int , stat : str , period : int ) -> Dict Query EC2 metrics Parameters: namespace ( str ): namespace to monitor the metrics within. This value must match the 'Nampespace' value in the config days ( int ): how many days to subtract from the current date to determine the metric collection start time hours ( int ): how many hours to subtract from the current time to determine the metric collection start time minute ( int ): how many minutes to subtract from the current time to determine the metric collection start time stat ( str ): stat to use, e.g. 'Maximum' period ( int ): the granularity, in seconds, of the returned data pointsreturn dict: metric statistics response, check the structure of the response here def save_metric_csv ( self , file_path : str , response : Union [ Dict , NoneType ] = None ) Query and save the metric data to a CSV file Parameters: file_path ( str ): path to the file to save the metric data to response ( dict ): response retrieved with query_ec2_metrics .A query is performed if not provided. def save_metric_json ( self , file_path : str , response : Union [ Dict , NoneType ] = None ) Query and save the metric data to a JSON file Parameters: file_path ( str ): path to the file to save the metric data to response ( dict ): response retrieved with query_ec2_metrics .A query is performed if not provided. def save_metric_plot ( self , file_path : str , response : Union [ Dict , NoneType ] = None ) Query and plot the metric data Parameters: file_path ( str ): path to the file to plot the metric data to kwargs (``): keyword arguments to pass to the plotter response ( dict ): response retrieved with query_ec2_metrics .A query is performed if not provided. def save_response_json ( self , file_path : str , response : Union [ Dict , NoneType ] = None ) Query and save the response data to a JSON file Parameters: file_path ( str ): path to the file to save the response data to response ( dict ): response retrieved with query_ec2_metrics .A query is performed if not provided. def summarize_metric_json ( self , response : Union [ Dict , NoneType ] = None ) Query and summarize the metric data to a JSON file Parameters: file_path ( str ): path to the file to save the metric data to response ( dict ): response retrieved with query_ec2_metrics .A query is performed if not provided. def timed_metric_factory ( response : dict ) -> List [ cloudwatcher . metric_handlers . TimedMetric ] Create a collection of TimedMetrics from the CloudWatch client response. Parameters: response ( dict ): response from CloudWatch client Returns: List[TimedMetric] : list of TimedMetric objects Class LogWatcher A class for AWS CloudWatch log events retrieval and parsing def __init__ ( self , log_group_name : str , log_stream_name : str , start_token : Union [ str , NoneType ] = None , aws_access_key_id : Union [ str , NoneType ] = None , aws_secret_access_key : Union [ str , NoneType ] = None , aws_session_token : Union [ str , NoneType ] = None , aws_region_name : Union [ str , NoneType ] = None ) -> None Initialize LogWatcher Parameters: log_group_name ( str ): The name of the log group log_stream_name ( str ): The name of the log stream region_name ( Optional[str] ): The name of the region. Defaults to 'us-east-1' start_token ( Optional[str] ): The start token to use for the query def check_log_exists ( self ) -> bool Check if the log stream exists Returns: bool : True if the log stream exists, False otherwise def format_logs_events ( self , log_events : List [ Dict [ str , str ]], regex : str = '^ \\\\ [ \\\\ d+- \\\\ d+- \\\\ d+ \\\\ s \\\\ d+: \\\\ d+: \\\\ d+(.|,) \\\\ d+( \\\\ ]| \\\\ s- \\\\ s \\\\ w+ \\\\ ])' , fmt_str : str = '[ {time} UTC] {message} ' ) -> List [ str ] Format log events Parameters: log_events ( List[Event] ): The list of log events regex ( str ): The regex to use for extracting the timestamp fmt_str ( str ): The format string to use for formatting the log event Returns: List[str] : The list of formatted log events def return_formatted_logs ( self , events_limit : int = 1000 , max_retry_attempts : int = 5 ) -> Tuple [ str , str ] A generator that yields formatted log events Parameters: events_limit ( Optional[int] ): The number of events to retrieve per iteration. Defaults to 1000 max_retry_attempts ( Optional[int] ): The number of retry attempts. Defaults to 5 Returns: Tuple[List[str], str] : formatted log events and the token to use for the next query def save_log_file ( self , file_path : str ) -> None Save the log file to the specified path Parameters: log_file_path ( str ): The path to save the log file def stream_cloudwatch_logs ( self , events_limit : int = 1000 , max_retry_attempts : int = 5 ) -> List [ Dict [ str , str ]] A generator that retrieves desired number of log events per iteration Parameters: log_group_name ( str ): The name of the log group log_stream_name ( str ): The name of the log stream events_limit ( int ): The number of events to retrieve per iteration Returns: List[Event] : The list of log events def stream_formatted_logs ( self , events_limit : int = 1000 , max_retry_attempts : int = 5 , sep : str = '<br>' ) -> Tuple [ List [ str ], str ] A generator that yields formatted log events Parameters: events_limit ( Optional[int] ): The number of events to retrieve per iteration. Defaults to 1000 max_retry_attempts ( Optional[int] ): The number of retry attempts. Defaults to 5 sep ( Optional[str] ): The format string to use for formatting the log event. Defaults to \" \" Returns: Tuple[List[str], str] : The list of formatted log events and the token to use for the next query Class ResponseLogger Log the response to the console Class ResponseSaver Save the response to a file Class TimedMetricCsvSaver Class to establish the interface for a timed metric handling Class TimedMetricJsonSaver Class to establish the interface for a timed metric handling Class TimedMetricLogger Class to establish the interface for a timed metric handling def mem_to_str ( size : int , precision : int = 3 ) -> str Convert bytes to human readable string Parameters: size ( int ): size in bytes precision ( int ): number of decimal places Class TimedMetricPlotter Class to establish the interface for a timed metric handling Class TimedMetricSummarizer Class to establish the interface for a timed metric handling Version Information: cloudwatcher v0.0.3, generated by lucidoc v0.4.3","title":"API documentation"},{"location":"API_documentation/#package-cloudwatcher-documentation","text":"","title":"Package cloudwatcher Documentation"},{"location":"API_documentation/#class-cloudwatcher","text":"A base class for CloudWatch managers def __init__ ( self , service_name : str , aws_region_name : Union [ str , NoneType ] = None , aws_access_key_id : Union [ str , NoneType ] = None , aws_secret_access_key : Union [ str , NoneType ] = None , aws_session_token : Union [ str , NoneType ] = None ) -> None Initialize CloudWatcher","title":" Class CloudWatcher"},{"location":"API_documentation/#parameters","text":"service_name ( str ): The name of the service region_name ( str ): The name of the region. Defaults to 'us-east-1' aws_access_key_id ( Optional[str] ): The AWS access key ID aws_secret_access_key ( Optional[str] ): The AWS secret access key aws_session_token ( Optional[str] ): The AWS session token","title":"Parameters:"},{"location":"API_documentation/#class-metricwatcher","text":"A class for AWS CloudWatch metric retrieval and parsing def __init__ ( self , namespace : str , ec2_instance_id : str , metric_name : str , metric_id : str , metric_unit : str , aws_access_key_id : Union [ str , NoneType ] = None , aws_secret_access_key : Union [ str , NoneType ] = None , aws_session_token : Union [ str , NoneType ] = None , aws_region_name : Union [ str , NoneType ] = None ) -> None Initialize MetricWatcher","title":" Class MetricWatcher"},{"location":"API_documentation/#parameters_1","text":"namespace ( str ): The namespace of the metric region_name ( Optional[str] ): The name of the region. Defaults to 'us-east-1' start_token ( Optional[str] ): The start token to use for the query def get_ec2_uptime ( self , days : int , hours : int , minutes : int ) -> int Get the runtime of an EC2 instance","title":"Parameters:"},{"location":"API_documentation/#parameters_2","text":"logger ( logging.logger ): logger to use. Any object that has 'info', 'warning' and 'error' methods days ( int ): how many days to subtract from the current date to determine the metric collection start time hours ( int ): how many hours to subtract from the current time to determine the metric collection start time minute ( int ): how many minutes to subtract from the current time to determine the metric collection start time namespace ( str ): namespace of the metric, e.g. 'NepheleNamespace' ec2_resource ( boto3.resource ): boto3 resource object to use, optional def is_ec2_running ( self ) -> bool Check if EC2 instance is running","title":"Parameters:"},{"location":"API_documentation/#returns","text":"bool : True if instance is running, False otherwise def log_metric ( self , response : Union [ Dict , NoneType ] = None ) Query and log the metric data","title":"Returns:"},{"location":"API_documentation/#parameters_3","text":"kwargs (``): keyword arguments to pass to the handler response ( dict ): response retrieved with query_ec2_metrics .A query is performed if not provided. def log_response ( self , response : Union [ Dict , NoneType ] = None ) Query and log the response","title":"Parameters:"},{"location":"API_documentation/#parameters_4","text":"response ( dict ): response retrieved with query_ec2_metrics .A query is performed if not provided. def query_ec2_metrics ( self , days : int , hours : int , minutes : int , stat : str , period : int ) -> Dict Query EC2 metrics","title":"Parameters:"},{"location":"API_documentation/#parameters_5","text":"namespace ( str ): namespace to monitor the metrics within. This value must match the 'Nampespace' value in the config days ( int ): how many days to subtract from the current date to determine the metric collection start time hours ( int ): how many hours to subtract from the current time to determine the metric collection start time minute ( int ): how many minutes to subtract from the current time to determine the metric collection start time stat ( str ): stat to use, e.g. 'Maximum' period ( int ): the granularity, in seconds, of the returned data pointsreturn dict: metric statistics response, check the structure of the response here def save_metric_csv ( self , file_path : str , response : Union [ Dict , NoneType ] = None ) Query and save the metric data to a CSV file","title":"Parameters:"},{"location":"API_documentation/#parameters_6","text":"file_path ( str ): path to the file to save the metric data to response ( dict ): response retrieved with query_ec2_metrics .A query is performed if not provided. def save_metric_json ( self , file_path : str , response : Union [ Dict , NoneType ] = None ) Query and save the metric data to a JSON file","title":"Parameters:"},{"location":"API_documentation/#parameters_7","text":"file_path ( str ): path to the file to save the metric data to response ( dict ): response retrieved with query_ec2_metrics .A query is performed if not provided. def save_metric_plot ( self , file_path : str , response : Union [ Dict , NoneType ] = None ) Query and plot the metric data","title":"Parameters:"},{"location":"API_documentation/#parameters_8","text":"file_path ( str ): path to the file to plot the metric data to kwargs (``): keyword arguments to pass to the plotter response ( dict ): response retrieved with query_ec2_metrics .A query is performed if not provided. def save_response_json ( self , file_path : str , response : Union [ Dict , NoneType ] = None ) Query and save the response data to a JSON file","title":"Parameters:"},{"location":"API_documentation/#parameters_9","text":"file_path ( str ): path to the file to save the response data to response ( dict ): response retrieved with query_ec2_metrics .A query is performed if not provided. def summarize_metric_json ( self , response : Union [ Dict , NoneType ] = None ) Query and summarize the metric data to a JSON file","title":"Parameters:"},{"location":"API_documentation/#parameters_10","text":"file_path ( str ): path to the file to save the metric data to response ( dict ): response retrieved with query_ec2_metrics .A query is performed if not provided. def timed_metric_factory ( response : dict ) -> List [ cloudwatcher . metric_handlers . TimedMetric ] Create a collection of TimedMetrics from the CloudWatch client response.","title":"Parameters:"},{"location":"API_documentation/#parameters_11","text":"response ( dict ): response from CloudWatch client","title":"Parameters:"},{"location":"API_documentation/#returns_1","text":"List[TimedMetric] : list of TimedMetric objects","title":"Returns:"},{"location":"API_documentation/#class-logwatcher","text":"A class for AWS CloudWatch log events retrieval and parsing def __init__ ( self , log_group_name : str , log_stream_name : str , start_token : Union [ str , NoneType ] = None , aws_access_key_id : Union [ str , NoneType ] = None , aws_secret_access_key : Union [ str , NoneType ] = None , aws_session_token : Union [ str , NoneType ] = None , aws_region_name : Union [ str , NoneType ] = None ) -> None Initialize LogWatcher","title":" Class LogWatcher"},{"location":"API_documentation/#parameters_12","text":"log_group_name ( str ): The name of the log group log_stream_name ( str ): The name of the log stream region_name ( Optional[str] ): The name of the region. Defaults to 'us-east-1' start_token ( Optional[str] ): The start token to use for the query def check_log_exists ( self ) -> bool Check if the log stream exists","title":"Parameters:"},{"location":"API_documentation/#returns_2","text":"bool : True if the log stream exists, False otherwise def format_logs_events ( self , log_events : List [ Dict [ str , str ]], regex : str = '^ \\\\ [ \\\\ d+- \\\\ d+- \\\\ d+ \\\\ s \\\\ d+: \\\\ d+: \\\\ d+(.|,) \\\\ d+( \\\\ ]| \\\\ s- \\\\ s \\\\ w+ \\\\ ])' , fmt_str : str = '[ {time} UTC] {message} ' ) -> List [ str ] Format log events","title":"Returns:"},{"location":"API_documentation/#parameters_13","text":"log_events ( List[Event] ): The list of log events regex ( str ): The regex to use for extracting the timestamp fmt_str ( str ): The format string to use for formatting the log event","title":"Parameters:"},{"location":"API_documentation/#returns_3","text":"List[str] : The list of formatted log events def return_formatted_logs ( self , events_limit : int = 1000 , max_retry_attempts : int = 5 ) -> Tuple [ str , str ] A generator that yields formatted log events","title":"Returns:"},{"location":"API_documentation/#parameters_14","text":"events_limit ( Optional[int] ): The number of events to retrieve per iteration. Defaults to 1000 max_retry_attempts ( Optional[int] ): The number of retry attempts. Defaults to 5","title":"Parameters:"},{"location":"API_documentation/#returns_4","text":"Tuple[List[str], str] : formatted log events and the token to use for the next query def save_log_file ( self , file_path : str ) -> None Save the log file to the specified path","title":"Returns:"},{"location":"API_documentation/#parameters_15","text":"log_file_path ( str ): The path to save the log file def stream_cloudwatch_logs ( self , events_limit : int = 1000 , max_retry_attempts : int = 5 ) -> List [ Dict [ str , str ]] A generator that retrieves desired number of log events per iteration","title":"Parameters:"},{"location":"API_documentation/#parameters_16","text":"log_group_name ( str ): The name of the log group log_stream_name ( str ): The name of the log stream events_limit ( int ): The number of events to retrieve per iteration","title":"Parameters:"},{"location":"API_documentation/#returns_5","text":"List[Event] : The list of log events def stream_formatted_logs ( self , events_limit : int = 1000 , max_retry_attempts : int = 5 , sep : str = '<br>' ) -> Tuple [ List [ str ], str ] A generator that yields formatted log events","title":"Returns:"},{"location":"API_documentation/#parameters_17","text":"events_limit ( Optional[int] ): The number of events to retrieve per iteration. Defaults to 1000 max_retry_attempts ( Optional[int] ): The number of retry attempts. Defaults to 5 sep ( Optional[str] ): The format string to use for formatting the log event. Defaults to \" \"","title":"Parameters:"},{"location":"API_documentation/#returns_6","text":"Tuple[List[str], str] : The list of formatted log events and the token to use for the next query","title":"Returns:"},{"location":"API_documentation/#class-responselogger","text":"Log the response to the console","title":" Class ResponseLogger"},{"location":"API_documentation/#class-responsesaver","text":"Save the response to a file","title":" Class ResponseSaver"},{"location":"API_documentation/#class-timedmetriccsvsaver","text":"Class to establish the interface for a timed metric handling","title":" Class TimedMetricCsvSaver"},{"location":"API_documentation/#class-timedmetricjsonsaver","text":"Class to establish the interface for a timed metric handling","title":" Class TimedMetricJsonSaver"},{"location":"API_documentation/#class-timedmetriclogger","text":"Class to establish the interface for a timed metric handling def mem_to_str ( size : int , precision : int = 3 ) -> str Convert bytes to human readable string","title":" Class TimedMetricLogger"},{"location":"API_documentation/#parameters_18","text":"size ( int ): size in bytes precision ( int ): number of decimal places","title":"Parameters:"},{"location":"API_documentation/#class-timedmetricplotter","text":"Class to establish the interface for a timed metric handling","title":" Class TimedMetricPlotter"},{"location":"API_documentation/#class-timedmetricsummarizer","text":"Class to establish the interface for a timed metric handling Version Information: cloudwatcher v0.0.3, generated by lucidoc v0.4.3","title":" Class TimedMetricSummarizer"},{"location":"EC2_instance_setup/","text":"EC2 instance setup In order to use the tool a CloudWatchAgent process must be running on the EC2 instance to be monitored. Please refer to this page to learn how to install and start the CloudWatchAgent on an EC2 instance. Configuration CloudWatchAgent is a powerful tool and can be configured to report variety of metrics. Here is an example of the configuration file: cloudwatch_agent_cfg.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"agent\" : { \"metrics_collection_interval\" : 10 }, \"metrics\" : { \"namespace\" : \"ExampleNamespace\" , \"metrics_collected\" : { \"mem\" : { \"measurement\" : [ \"mem_used\" , \"mem_cached\" , \"mem_total\" ], \"metrics_collection_interval\" : 1 } }, \"append_dimensions\" : { \"InstanceId\" : \"${aws:InstanceId}\" } } } The above configuration file is used to colect 3 memory metrics every second: mem_used mem_cached mem_total EC2 userdata The tool can be configured to be launched automatically by the EC2 instance userdata. Here are the steps to configure the tool to be launched automatically: Download CloudWatchAgent appropriate for your EC2 instance type; learn more here . Install CloudWatchAgent on the EC2 instance. Create/copy a CloudWatchAgent configuration file. Start the CloudWatchAgent service pointing to the created configuration file. For a Debian EC2 instance, the steps can be achieved by executing the following commands: ec2_userdata.sh 1 2 3 4 5 6 7 8 #!/bin/bash CLOUDWATCH_CFG_SRC = <path-in-repo>/config.json CLOUDWATCH_CFG_FILE = /opt/aws/amazon-cloudwatch-agent/bin/config.json wget https://s3.amazonaws.com/amazoncloudwatch-agent/debian/amd64/latest/amazon-cloudwatch-agent.deb dpkg -i -E ./amazon-cloudwatch-agent.deb cp $CLOUDWATCH_CFG_SRC $CLOUDWATCH_CFG_FILE /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file: $CLOUDWATCH_CFG_FILE","title":"EC2 intance setup"},{"location":"EC2_instance_setup/#ec2-instance-setup","text":"In order to use the tool a CloudWatchAgent process must be running on the EC2 instance to be monitored. Please refer to this page to learn how to install and start the CloudWatchAgent on an EC2 instance.","title":"EC2 instance setup"},{"location":"EC2_instance_setup/#configuration","text":"CloudWatchAgent is a powerful tool and can be configured to report variety of metrics. Here is an example of the configuration file: cloudwatch_agent_cfg.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"agent\" : { \"metrics_collection_interval\" : 10 }, \"metrics\" : { \"namespace\" : \"ExampleNamespace\" , \"metrics_collected\" : { \"mem\" : { \"measurement\" : [ \"mem_used\" , \"mem_cached\" , \"mem_total\" ], \"metrics_collection_interval\" : 1 } }, \"append_dimensions\" : { \"InstanceId\" : \"${aws:InstanceId}\" } } } The above configuration file is used to colect 3 memory metrics every second: mem_used mem_cached mem_total","title":"Configuration"},{"location":"EC2_instance_setup/#ec2-userdata","text":"The tool can be configured to be launched automatically by the EC2 instance userdata. Here are the steps to configure the tool to be launched automatically: Download CloudWatchAgent appropriate for your EC2 instance type; learn more here . Install CloudWatchAgent on the EC2 instance. Create/copy a CloudWatchAgent configuration file. Start the CloudWatchAgent service pointing to the created configuration file. For a Debian EC2 instance, the steps can be achieved by executing the following commands: ec2_userdata.sh 1 2 3 4 5 6 7 8 #!/bin/bash CLOUDWATCH_CFG_SRC = <path-in-repo>/config.json CLOUDWATCH_CFG_FILE = /opt/aws/amazon-cloudwatch-agent/bin/config.json wget https://s3.amazonaws.com/amazoncloudwatch-agent/debian/amd64/latest/amazon-cloudwatch-agent.deb dpkg -i -E ./amazon-cloudwatch-agent.deb cp $CLOUDWATCH_CFG_SRC $CLOUDWATCH_CFG_FILE /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file: $CLOUDWATCH_CFG_FILE","title":"EC2 userdata"},{"location":"changelog/","text":"Changelog This project adheres to Semantic Versioning and Keep a Changelog format. [0.0.3] - 2022-04-25 Added Added support for log saving to file: cloudwatcher log --save [0.0.2] - 2022-04-25 Added Initial release","title":"Release notes"},{"location":"changelog/#changelog","text":"This project adheres to Semantic Versioning and Keep a Changelog format.","title":"Changelog"},{"location":"changelog/#003-2022-04-25","text":"","title":"[0.0.3] - 2022-04-25"},{"location":"changelog/#added","text":"Added support for log saving to file: cloudwatcher log --save","title":"Added"},{"location":"changelog/#002-2022-04-25","text":"","title":"[0.0.2] - 2022-04-25"},{"location":"changelog/#added_1","text":"Initial release","title":"Added"},{"location":"docs_development/","text":"Documentation development The documentation is built from the makrdown files in the /docs directory with static site generator MkDocs . With make Makefile The following commands are encoded in a Makefie in this repository: makefile . Serve To serve the documentation locally, you can the serve_docs target: make serve_docs The documentation is served on http://localhost:8000/ . Build To build the documentation, you can the build_docs target: make build_docs The documentation is built in the /site directory. Deploy To deploy the documentation to GitHub Pages, you can the deploy_docs target: make deploy_docs The documentation is deployed to GitHub Pages. By hand In order to serve the documentation by hand follow the steps below. Note The commands need to be run from the root of the repository, unless stated otherwise. Install the documentation-related dependancies and the Python package itself with Poetry poetry install Document the API of the package lucidoc cloudwatcher --parse rst --outfile docs/API_documentation.md Run the following command in the project root mkdocs serve Deploying the documentation In order to deploy the documentation run the following command: mkdocs gh-deploy","title":"Docs development"},{"location":"docs_development/#documentation-development","text":"The documentation is built from the makrdown files in the /docs directory with static site generator MkDocs .","title":"Documentation development"},{"location":"docs_development/#with-make","text":"Makefile The following commands are encoded in a Makefie in this repository: makefile .","title":"With make"},{"location":"docs_development/#serve","text":"To serve the documentation locally, you can the serve_docs target: make serve_docs The documentation is served on http://localhost:8000/ .","title":"Serve"},{"location":"docs_development/#build","text":"To build the documentation, you can the build_docs target: make build_docs The documentation is built in the /site directory.","title":"Build"},{"location":"docs_development/#deploy","text":"To deploy the documentation to GitHub Pages, you can the deploy_docs target: make deploy_docs The documentation is deployed to GitHub Pages.","title":"Deploy"},{"location":"docs_development/#by-hand","text":"In order to serve the documentation by hand follow the steps below. Note The commands need to be run from the root of the repository, unless stated otherwise. Install the documentation-related dependancies and the Python package itself with Poetry poetry install Document the API of the package lucidoc cloudwatcher --parse rst --outfile docs/API_documentation.md Run the following command in the project root mkdocs serve","title":"By hand"},{"location":"docs_development/#deploying-the-documentation","text":"In order to deploy the documentation run the following command: mkdocs gh-deploy","title":"Deploying the documentation"},{"location":"features/","text":"Features The tool can generate multiple outputs, depending on the options specified. Generally, they can be classified as: console output and output files . Console output Always generated. Table A table printed to the console, which can be used for visual inspection of the metrics collected. \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 Time (UTC) \u2503 Value \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 19:17:30 \u2502 469.113 MB \u2502 \u2502 19:17:00 \u2502 1.721 GB \u2502 \u2502 19:16:30 \u2502 6.230 GB \u2502 \u2502 19:16:00 \u2502 7.428 GB \u2502 \u2502 19:15:30 \u2502 2.417 GB \u2502 \u2502 19:15:00 \u2502 2.752 GB \u2502 \u2502 19:14:30 \u2502 2.836 GB \u2502 \u2502 19:14:00 \u2502 1.348 GB \u2502 \u2502 19:13:30 \u2502 772.855 MB \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Summary message A summary message is printed to the console: Max 'memory_usage' is 6.23 GB over 1:03:00 timespan Uptime A summary message with the uptime of the instance in seconds. It's either calculated precisely if the instance is running, or estimated based on the reported metrics over at least 15 days. If a longer period of time is desired, please use the --days option. Instance uptime is 72886 seconds Output files Generated when --save option is used. JSON with reponse A JSON file with the response from the AWS API, useful for debugging. {instance_id}_response.json { \"MetricDataResults\" : [ { \"Id\" : \"memory_usage\" , \"Label\" : \"mem_used\" , \"Values\" : [ 492003328.0 , 492204032.0 , 492040192.0 , 450666496.0 , 429965312.0 ], \"Timestamps\" : [ \"2021-11-12 19:19:00+00:00\" , \"2021-11-12 19:18:30+00:00\" , \"2021-11-12 19:18:00+00:00\" , \"2021-11-12 19:12:00+00:00\" , \"2021-11-12 19:11:30+00:00\" ], \"StatusCode\" : \"Complete\" } ], \"Messages\" : [], \"ResponseMetadata\" : { \"RequestId\" : \"f603ff23-a3d3-43a7-b3b3-65106445a9ed\" , \"HTTPStatusCode\" : 200 , \"HTTPHeaders\" : { \"x-amzn-requestid\" : \"f603ff23-a3d3-43a7-b3b3-65106445a9ed\" , \"content-type\" : \"text/xml\" , \"content-length\" : \"1954\" , \"date\" : \"Fri, 12 Nov 2021 22:05:42 GMT\" }, \"RetryAttempts\" : 0 } } JSON with metric data A JSON file with the raw data, which can be used for further analysis. {instance_id}_{metric_label}.json { \"Label\" : \"mem_used\" , \"Values\" : [ 492003328.0 , 492204032.0 , 492040192.0 , 450666496.0 , 429965312.0 ], \"Timestamps\" : [ \"2021-11-12 19:19:00+00:00\" , \"2021-11-12 19:18:30+00:00\" , \"2021-11-12 19:18:00+00:00\" , \"2021-11-12 19:12:00+00:00\" , \"2021-11-12 19:11:30+00:00\" ] } CSV with metric data A CSV file with the raw data, which can be used for further analysis. {instance_id}_{metric_label}.csv time,value 2021-11-12 19:19:00+00:00,492003328.0 2021-11-12 19:18:30+00:00,492204032.0 2021-11-12 19:18:00+00:00,492040192.0 2021-11-12 19:12:00+00:00,450666496.0 2021-11-12 19:11:30+00:00,429965312.0 Plot with metric data Generated when --plot option used. {instance_id}_{metric_label}.png","title":"Features"},{"location":"features/#features","text":"The tool can generate multiple outputs, depending on the options specified. Generally, they can be classified as: console output and output files .","title":"Features"},{"location":"features/#console-output","text":"Always generated.","title":"Console output"},{"location":"features/#table","text":"A table printed to the console, which can be used for visual inspection of the metrics collected. \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 Time (UTC) \u2503 Value \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 19:17:30 \u2502 469.113 MB \u2502 \u2502 19:17:00 \u2502 1.721 GB \u2502 \u2502 19:16:30 \u2502 6.230 GB \u2502 \u2502 19:16:00 \u2502 7.428 GB \u2502 \u2502 19:15:30 \u2502 2.417 GB \u2502 \u2502 19:15:00 \u2502 2.752 GB \u2502 \u2502 19:14:30 \u2502 2.836 GB \u2502 \u2502 19:14:00 \u2502 1.348 GB \u2502 \u2502 19:13:30 \u2502 772.855 MB \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Table"},{"location":"features/#summary-message","text":"A summary message is printed to the console: Max 'memory_usage' is 6.23 GB over 1:03:00 timespan","title":"Summary message"},{"location":"features/#uptime","text":"A summary message with the uptime of the instance in seconds. It's either calculated precisely if the instance is running, or estimated based on the reported metrics over at least 15 days. If a longer period of time is desired, please use the --days option. Instance uptime is 72886 seconds","title":"Uptime"},{"location":"features/#output-files","text":"Generated when --save option is used.","title":"Output files"},{"location":"features/#json-with-reponse","text":"A JSON file with the response from the AWS API, useful for debugging. {instance_id}_response.json { \"MetricDataResults\" : [ { \"Id\" : \"memory_usage\" , \"Label\" : \"mem_used\" , \"Values\" : [ 492003328.0 , 492204032.0 , 492040192.0 , 450666496.0 , 429965312.0 ], \"Timestamps\" : [ \"2021-11-12 19:19:00+00:00\" , \"2021-11-12 19:18:30+00:00\" , \"2021-11-12 19:18:00+00:00\" , \"2021-11-12 19:12:00+00:00\" , \"2021-11-12 19:11:30+00:00\" ], \"StatusCode\" : \"Complete\" } ], \"Messages\" : [], \"ResponseMetadata\" : { \"RequestId\" : \"f603ff23-a3d3-43a7-b3b3-65106445a9ed\" , \"HTTPStatusCode\" : 200 , \"HTTPHeaders\" : { \"x-amzn-requestid\" : \"f603ff23-a3d3-43a7-b3b3-65106445a9ed\" , \"content-type\" : \"text/xml\" , \"content-length\" : \"1954\" , \"date\" : \"Fri, 12 Nov 2021 22:05:42 GMT\" }, \"RetryAttempts\" : 0 } }","title":"JSON with reponse"},{"location":"features/#json-with-metric-data","text":"A JSON file with the raw data, which can be used for further analysis. {instance_id}_{metric_label}.json { \"Label\" : \"mem_used\" , \"Values\" : [ 492003328.0 , 492204032.0 , 492040192.0 , 450666496.0 , 429965312.0 ], \"Timestamps\" : [ \"2021-11-12 19:19:00+00:00\" , \"2021-11-12 19:18:30+00:00\" , \"2021-11-12 19:18:00+00:00\" , \"2021-11-12 19:12:00+00:00\" , \"2021-11-12 19:11:30+00:00\" ] }","title":"JSON with metric data"},{"location":"features/#csv-with-metric-data","text":"A CSV file with the raw data, which can be used for further analysis. {instance_id}_{metric_label}.csv time,value 2021-11-12 19:19:00+00:00,492003328.0 2021-11-12 19:18:30+00:00,492204032.0 2021-11-12 19:18:00+00:00,492040192.0 2021-11-12 19:12:00+00:00,450666496.0 2021-11-12 19:11:30+00:00,429965312.0","title":"CSV with metric data"},{"location":"features/#plot-with-metric-data","text":"Generated when --plot option used. {instance_id}_{metric_label}.png","title":"Plot with metric data"},{"location":"installation/","text":"Installation The package is distributed and available on PyPI: cloudwatcher . Therefore you can install it using pip: pip install cloudwatcher","title":"Installation"},{"location":"installation/#installation","text":"The package is distributed and available on PyPI: cloudwatcher . Therefore you can install it using pip: pip install cloudwatcher","title":"Installation"},{"location":"login_credentials/","text":"Login credentials The login credentials that determine the AWS account to be used are resolved by boto3 , the official Python SDK for AWS, during the boto3.Session.client initialization. Resolution order In general, the credentials are resolved in the following order: The credentials are read from the environment variables: AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY export AWS_ACCESS_KEY_ID=<access_key_id> export AWS_SECRET_ACCESS_KEY=<secret_access_key> The credentials are read from [default] section of the ~/.aws/credentials file [default] aws_access_key_id = <access_key_id> aws_secret_access_key = <secret_access_key>","title":"AWS credentials"},{"location":"login_credentials/#login-credentials","text":"The login credentials that determine the AWS account to be used are resolved by boto3 , the official Python SDK for AWS, during the boto3.Session.client initialization.","title":"Login credentials"},{"location":"login_credentials/#resolution-order","text":"In general, the credentials are resolved in the following order: The credentials are read from the environment variables: AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY export AWS_ACCESS_KEY_ID=<access_key_id> export AWS_SECRET_ACCESS_KEY=<secret_access_key> The credentials are read from [default] section of the ~/.aws/credentials file [default] aws_access_key_id = <access_key_id> aws_secret_access_key = <secret_access_key>","title":"Resolution order"},{"location":"usage/","text":"There are two modes of operation on the CLI: cloudwatcher metric cloudwatcher log cloudwatcher --help version: 0.0.3 Documentation available at: https://niaid.github.io/cloudwatcher usage: cloudwatcher [-h] {metric,log} ... CloudWatch logs and metrics explorer. positional arguments: {metric,log} metric Interact with AWS CloudWatch metrics. log Interact with AWS CloudWatch logs. optional arguments: -h, --help show this help message and exit CloudWatch metrics monitoring The tool is highly configurable and can be used in a variety of ways. Naturally, the metrics available to be monitored depend on the configuration of the CloudWatchAgent process. By default the tool will report the mem_used metric starting 24 hours ago until present with granularity/period of 1 minute, expressed in Bytes. Please refer to the usage below for more options: clouwatcher metric --help version: 0.0.3 Documentation available at: https://niaid.github.io/cloudwatcher usage: cloudwatcher metric [-h] [--version] [--debug] [--aws-region R] [--aws-access-key-id K] [--aws-secret-access-key S] [--aws-session-token T] [--save] [-d DIR] [-q Q] [-i ID] [-m N] -iid ID [--uptime] [--days D] [-hr H] [-mi M] [-u U] [-s S] [-p P] [--plot] --namespace N Interact with AWS CloudWatch metrics. optional arguments: -h, --help show this help message and exit --version Print version and exit --debug Whether debug mode should be launched (default: False) --save Whether to save the results to files in the selected directory (default: False) -d DIR, --dir DIR Directory to store the results in. Used with `--save` (default: ./) -q Q, --query-json Q Path to a query JSON file. This is not implemented yet. -i ID, --id ID The unique identifier to assign to the metric data. Must be of the form '^[a-z][a-zA-Z0-9_]*$'. -m N, --metric N Name of the metric collected by CloudWatchAgent (default: mem_used) -iid ID, --instance-id ID Instance ID, needs to follow 'i-<numbers>' format --uptime Display the uptime of the instance in seconds. It's either calculated precisely if the instance is still running, or estimated based on the reported metrics. -u U, --unit U If you omit Unit then all data that was collected with any unit is returned. If you specify a unit, it acts as a filter and returns only data that was collected with that unit specified. Use 'Bytes' for memory (default: Bytes) -s S, --stat S The statistic to apply over the time intervals, e.g. 'Maximum' (default: Maximum) -p P, --period P The granularity, in seconds, of the returned data points. Choices: 1, 5, 10, 30, 60, or any multiple of 60 (default: 60). It affects the data availability. See the docs 'Usage' section for more details. --plot Whether to plot the metric data (default: False) --namespace N Namespace to monitor the metrics within. This value must match the 'Namespace' value in the CloudWatchAgent config. AWS CREDENTIALS: Can be ommited if set in environment variables --aws-region R Region to monitor the metrics within. (default: us-east-1) --aws-access-key-id K AWS Access Key ID to use for authentication --aws-secret-access-key S AWS Secret Access Key to use for authentication --aws-session-token T AWS Session Token to use for authentication METRIC COLLECTION TIME: The time range to collect metrics from. Uptime will be estimated in the timespan starting at least 15 ago. --days D How many days to subtract from the current date to determine the metric collection start time (default: 1). -hr H, --hours H How many hours to subtract from the current time to determine the metric collection start time (default: 0). -mi M, --minutes M How many minutes to subtract from the current time to determine the metric collection start time (default: 0). Minimal command python3.9 cloudwatch.py --instance-id i-024a73d6738255cbd Notes on metrics availabilty Amazon CloudWatch retains metric data as follows: Data points with a period of less than 60 seconds are available for 3 hours. Data points with a period of 60 seconds (1-minute) are available for 15 days. Data points with a period of 300 seconds (5-minute) are available for 63 days. Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months). Select your period of interest accordingly. CloudWatch logs monitoring clouwatcher log --help version: 0.0.3 Documentation available at: https://niaid.github.io/cloudwatcher usage: cloudwatcher log [-h] [--version] [--debug] [--aws-region R] [--aws-access-key-id K] [--aws-secret-access-key S] [--aws-session-token T] [--save] [-d DIR] -g G -s S Interact with AWS CloudWatch logs. optional arguments: -h, --help show this help message and exit --version Print version and exit --debug Whether debug mode should be launched (default: False) --save Whether to save the results to files in the selected directory (default: False) -d DIR, --dir DIR Directory to store the results in. Used with `--save` (default: ./) -g G, --log-group-name G The log group name to monitor -s S, --log-stream-name S The log stream name to monitor AWS CREDENTIALS: Can be ommited if set in environment variables --aws-region R Region to monitor the metrics within. (default: us-east-1) --aws-access-key-id K AWS Access Key ID to use for authentication --aws-secret-access-key S AWS Secret Access Key to use for authentication --aws-session-token T AWS Session Token to use for authentication","title":"Usage"},{"location":"usage/#cloudwatch-metrics-monitoring","text":"The tool is highly configurable and can be used in a variety of ways. Naturally, the metrics available to be monitored depend on the configuration of the CloudWatchAgent process. By default the tool will report the mem_used metric starting 24 hours ago until present with granularity/period of 1 minute, expressed in Bytes. Please refer to the usage below for more options: clouwatcher metric --help version: 0.0.3 Documentation available at: https://niaid.github.io/cloudwatcher usage: cloudwatcher metric [-h] [--version] [--debug] [--aws-region R] [--aws-access-key-id K] [--aws-secret-access-key S] [--aws-session-token T] [--save] [-d DIR] [-q Q] [-i ID] [-m N] -iid ID [--uptime] [--days D] [-hr H] [-mi M] [-u U] [-s S] [-p P] [--plot] --namespace N Interact with AWS CloudWatch metrics. optional arguments: -h, --help show this help message and exit --version Print version and exit --debug Whether debug mode should be launched (default: False) --save Whether to save the results to files in the selected directory (default: False) -d DIR, --dir DIR Directory to store the results in. Used with `--save` (default: ./) -q Q, --query-json Q Path to a query JSON file. This is not implemented yet. -i ID, --id ID The unique identifier to assign to the metric data. Must be of the form '^[a-z][a-zA-Z0-9_]*$'. -m N, --metric N Name of the metric collected by CloudWatchAgent (default: mem_used) -iid ID, --instance-id ID Instance ID, needs to follow 'i-<numbers>' format --uptime Display the uptime of the instance in seconds. It's either calculated precisely if the instance is still running, or estimated based on the reported metrics. -u U, --unit U If you omit Unit then all data that was collected with any unit is returned. If you specify a unit, it acts as a filter and returns only data that was collected with that unit specified. Use 'Bytes' for memory (default: Bytes) -s S, --stat S The statistic to apply over the time intervals, e.g. 'Maximum' (default: Maximum) -p P, --period P The granularity, in seconds, of the returned data points. Choices: 1, 5, 10, 30, 60, or any multiple of 60 (default: 60). It affects the data availability. See the docs 'Usage' section for more details. --plot Whether to plot the metric data (default: False) --namespace N Namespace to monitor the metrics within. This value must match the 'Namespace' value in the CloudWatchAgent config. AWS CREDENTIALS: Can be ommited if set in environment variables --aws-region R Region to monitor the metrics within. (default: us-east-1) --aws-access-key-id K AWS Access Key ID to use for authentication --aws-secret-access-key S AWS Secret Access Key to use for authentication --aws-session-token T AWS Session Token to use for authentication METRIC COLLECTION TIME: The time range to collect metrics from. Uptime will be estimated in the timespan starting at least 15 ago. --days D How many days to subtract from the current date to determine the metric collection start time (default: 1). -hr H, --hours H How many hours to subtract from the current time to determine the metric collection start time (default: 0). -mi M, --minutes M How many minutes to subtract from the current time to determine the metric collection start time (default: 0).","title":"CloudWatch metrics monitoring"},{"location":"usage/#minimal-command","text":"python3.9 cloudwatch.py --instance-id i-024a73d6738255cbd","title":"Minimal command"},{"location":"usage/#notes-on-metrics-availabilty","text":"Amazon CloudWatch retains metric data as follows: Data points with a period of less than 60 seconds are available for 3 hours. Data points with a period of 60 seconds (1-minute) are available for 15 days. Data points with a period of 300 seconds (5-minute) are available for 63 days. Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months). Select your period of interest accordingly.","title":"Notes on metrics availabilty"},{"location":"usage/#cloudwatch-logs-monitoring","text":"clouwatcher log --help version: 0.0.3 Documentation available at: https://niaid.github.io/cloudwatcher usage: cloudwatcher log [-h] [--version] [--debug] [--aws-region R] [--aws-access-key-id K] [--aws-secret-access-key S] [--aws-session-token T] [--save] [-d DIR] -g G -s S Interact with AWS CloudWatch logs. optional arguments: -h, --help show this help message and exit --version Print version and exit --debug Whether debug mode should be launched (default: False) --save Whether to save the results to files in the selected directory (default: False) -d DIR, --dir DIR Directory to store the results in. Used with `--save` (default: ./) -g G, --log-group-name G The log group name to monitor -s S, --log-stream-name S The log stream name to monitor AWS CREDENTIALS: Can be ommited if set in environment variables --aws-region R Region to monitor the metrics within. (default: us-east-1) --aws-access-key-id K AWS Access Key ID to use for authentication --aws-secret-access-key S AWS Secret Access Key to use for authentication --aws-session-token T AWS Session Token to use for authentication","title":"CloudWatch logs monitoring"}]}